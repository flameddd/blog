1
00:00:00,000 --> 00:00:07,940
 All right, party on.

2
00:00:07,940 --> 00:00:09,680
 Thank you everyone for being here.

3
00:00:09,680 --> 00:00:15,000
 Today we're going to talk about the edge, one term that is bubbling around in the infrastructure

4
00:00:15,000 --> 00:00:20,840
 world and one that keeps a lot of people with tons of excitement.

5
00:00:20,840 --> 00:00:21,840
 My name is Chase Roberts.

6
00:00:21,840 --> 00:00:24,480
 I'm an investor at Vertex Ventures.

7
00:00:24,480 --> 00:00:30,440
 We're an early stage venture capital firm that invests in technical founders building

8
00:00:30,440 --> 00:00:32,200
 enterprise software companies.

9
00:00:32,200 --> 00:00:35,680
 I've got my colleague Megan here as well.

10
00:00:35,680 --> 00:00:37,680
 Megan say hello.

11
00:00:37,680 --> 00:00:38,680
 Hey.

12
00:00:38,680 --> 00:00:39,680
 Awesome.

13
00:00:39,680 --> 00:00:43,240
 And then with that, why don't we, we've got a fantastic panel.

14
00:00:43,240 --> 00:00:46,560
 So why don't we start with some introductions?

15
00:00:46,560 --> 00:00:50,840
 If everyone could say their name, what they're working on, and then we're going to add one

16
00:00:50,840 --> 00:00:55,960
 more spicy question, which is what was the first technology that you ever loved or have

17
00:00:55,960 --> 00:00:57,640
 any memory of loving?

18
00:00:57,640 --> 00:01:04,280
 So why don't we start with Guillermo and then we'll go to Kurt and then Nick.

19
00:01:04,280 --> 00:01:05,720
 Hey everybody.

20
00:01:05,720 --> 00:01:07,960
 Thanks for this opportunity Chase and Megan.

21
00:01:07,960 --> 00:01:10,680
 I'm really excited to talk about the edge today.

22
00:01:10,680 --> 00:01:11,680
 So I'm Guillermo Rauch.

23
00:01:11,680 --> 00:01:17,080
 I'm the creator of Next.js and the CEO and founder of Purcell, the platform that enables

24
00:01:17,080 --> 00:01:24,640
 developers to create and deploy their dreams onto the web.

25
00:01:24,640 --> 00:01:28,720
 And the first technology that you remember loving?

26
00:01:28,720 --> 00:01:29,720
 Great question by the way.

27
00:01:29,720 --> 00:01:30,720
 Love it.

28
00:01:30,720 --> 00:01:33,800
 It made me really think back to my childhood.

29
00:01:33,800 --> 00:01:37,920
 And one of the things I always mentioned is that for me, open source really started it

30
00:01:37,920 --> 00:01:39,120
 all.

31
00:01:39,120 --> 00:01:43,960
 And the first technology that I really fell in love with was Linux and in particular the

32
00:01:43,960 --> 00:01:48,160
 Debian Linux distribution.

33
00:01:48,160 --> 00:01:52,720
 It had the caveat that it was slightly harder to install to what I was using before, which

34
00:01:52,720 --> 00:01:57,560
 was Red Hat, which had a very consumer focus in the beginning.

35
00:01:57,560 --> 00:02:00,340
 So Debian was like, I felt like a hacker.

36
00:02:00,340 --> 00:02:07,120
 I loved apt-get and apt-cache search, just like installing packages, spending time on

37
00:02:07,120 --> 00:02:08,120
 the terminal.

38
00:02:08,120 --> 00:02:09,120
 I really, really loved it.

39
00:02:09,120 --> 00:02:12,120
 And it really consumed a lot of my childhood.

40
00:02:12,120 --> 00:02:15,200
 It became one with the technology.

41
00:02:15,200 --> 00:02:16,440
 I freaking loved it.

42
00:02:16,440 --> 00:02:18,760
 So thanks for bringing it back to memory.

43
00:02:18,760 --> 00:02:19,760
 That's great.

44
00:02:19,760 --> 00:02:22,280
 How about you, Kurt?

45
00:02:22,280 --> 00:02:23,280
 I'm Kurt.

46
00:02:23,280 --> 00:02:27,720
 I'm CEO and one of the founders of Fly.io.

47
00:02:27,720 --> 00:02:31,600
 We're a dev-focused cloud for running full stack apps all over the world, close to the

48
00:02:31,600 --> 00:02:36,240
 users.

49
00:02:36,240 --> 00:02:37,960
 If I go away, this is going to age me.

50
00:02:37,960 --> 00:02:43,840
 My favorite, my formative technology was actually, it was 3D Studio release 4, which is notable

51
00:02:43,840 --> 00:02:48,480
 because it was the last one for MS-DOS before they switched to Windows and became 3D Studio

52
00:02:48,480 --> 00:02:49,480
 Max.

53
00:02:49,480 --> 00:02:55,360
 And it was the, at that point it convinced me I wanted to go work at Pixar and animate

54
00:02:55,360 --> 00:02:56,520
 movies for the rest of my life.

55
00:02:56,520 --> 00:02:58,160
 It was the 3D animation package.

56
00:02:58,160 --> 00:03:02,520
 I'm not actually very good at 3D animation or modeling, but I could do some stuff.

57
00:03:02,520 --> 00:03:04,000
 And I liked how it ended up looking.

58
00:03:04,000 --> 00:03:08,160
 So it's the first time I remember like making something and then being able to show it to

59
00:03:08,160 --> 00:03:11,360
 people, which was a very, that stuck with me.

60
00:03:11,360 --> 00:03:12,600
 I still like to do that.

61
00:03:12,600 --> 00:03:13,600
 It's weird.

62
00:03:13,600 --> 00:03:14,600
 That's cool.

63
00:03:14,600 --> 00:03:20,240
 And then alternative universe, Kurt, is accepting a, not a Grammy, an Oscar for some digital

64
00:03:20,240 --> 00:03:21,240
...

65
00:03:21,240 --> 00:03:22,240
 Probably a Razzie.

66
00:03:22,240 --> 00:03:23,240
 Probably a Razzie.

67
00:03:23,240 --> 00:03:26,240
 It definitely would be a Razzie.

68
00:03:26,240 --> 00:03:27,240
 Nice.

69
00:03:27,240 --> 00:03:29,880
 And last and certainly not least, Nick.

70
00:03:29,880 --> 00:03:30,880
 Appreciate it.

71
00:03:30,880 --> 00:03:31,880
 Thanks.

72
00:03:31,880 --> 00:03:32,880
 So my name's Nick.

73
00:03:32,880 --> 00:03:35,520
 I am the VP of engineering at PlanetScale.

74
00:03:35,520 --> 00:03:41,200
 So we're a database as a kind of a service platform built to help you get from zero to

75
00:03:41,200 --> 00:03:45,920
 what we say outrageous scale, really bigger than you can fathom.

76
00:03:45,920 --> 00:03:50,320
 And the first technology, my formative technology was the M IRC scripting language for those

77
00:03:50,320 --> 00:03:52,760
 of you who are here with IRC.

78
00:03:52,760 --> 00:03:56,600
 I really loved, you know, when I was a kid, being able to dial up onto the internet and

79
00:03:56,600 --> 00:03:59,720
 kind of chat with strangers was like the pinnacle of the internet.

80
00:03:59,720 --> 00:04:04,240
 And I really wanted to start doing was write bots and scripts and stuff like that to make

81
00:04:04,240 --> 00:04:05,240
 that more fun.

82
00:04:05,240 --> 00:04:09,840
 So I taught myself how to write M IRC scripting language from cobbling together random snippets

83
00:04:09,840 --> 00:04:10,840
 from the internet.

84
00:04:10,840 --> 00:04:13,920
 That was the first time I ever felt like, you know, I was actually building something

85
00:04:13,920 --> 00:04:16,480
 on the internet and doing something.

86
00:04:16,480 --> 00:04:21,160
 And yeah, I think Kurt, that time from zero to I've got something to show someone one

87
00:04:21,160 --> 00:04:25,200
 of the best parts about technology, when you can minimize that and just do something special,

88
00:04:25,200 --> 00:04:27,200
 you know, right from your laptop.

89
00:04:27,200 --> 00:04:30,200
 That's amazing.

90
00:04:30,200 --> 00:04:36,920
 Well, I will not share mine because mine is not nearly as interesting as those and it

91
00:04:36,920 --> 00:04:41,120
 may or may not have had something to do with customizing my Myspace page.

92
00:04:41,120 --> 00:04:48,320
 But with that, why don't we go ahead and kick this off by actually defining the edge.

93
00:04:48,320 --> 00:04:51,040
 This term could mean a lot of different things to a lot of different people.

94
00:04:51,040 --> 00:04:56,640
 So it'd be interesting just to go around the group and like actually work out a definition

95
00:04:56,640 --> 00:04:57,640
 here.

96
00:04:57,640 --> 00:04:59,880
 So, you know, perhaps we'll start with Guillermo again.

97
00:04:59,880 --> 00:05:01,360
 Like how would you define the edge?

98
00:05:01,360 --> 00:05:02,880
 Like what is this thing?

99
00:05:02,880 --> 00:05:05,000
 Yeah, a couple of thoughts there.

100
00:05:05,000 --> 00:05:11,520
 One that's really quick and relevant to the Vercel mission, which is to make the web faster

101
00:05:11,520 --> 00:05:13,520
 and more personalized.

102
00:05:13,520 --> 00:05:16,940
 I think of the edge fundamentally as a means to an end.

103
00:05:16,940 --> 00:05:22,440
 It's infrastructure that's necessary in an increasing number of ways to get to that goal

104
00:05:22,440 --> 00:05:26,560
 of making the web faster and more personal.

105
00:05:26,560 --> 00:05:33,520
 But on a technical level, I would define it in the way we implement it is a very fast

106
00:05:33,520 --> 00:05:38,440
 cloud native way of running code as close as possible to the visitor.

107
00:05:38,440 --> 00:05:42,160
 But I think the crucial distinction here is that not really on their device.

108
00:05:42,160 --> 00:05:47,400
 A lot of folks from like the IOT wave and prior, I think what makes the edge word a

109
00:05:47,400 --> 00:05:53,360
 little confusing to some folks sometimes is some folks may say like edge is the Kubernetes

110
00:05:53,360 --> 00:05:57,240
 cluster that runs inside Chipotle and if you all heard about that story.

111
00:05:57,240 --> 00:06:03,480
 To us at Vercel is you deploy and we run it in data centers as close as possible to the

112
00:06:03,480 --> 00:06:04,480
 user.

113
00:06:04,480 --> 00:06:10,400
 Maybe one day we'll get to Chipotle, but right now it's in the major areas next to visitors

114
00:06:10,400 --> 00:06:16,760
 where we'll serve really fast e-commerce experiences, marketing experiences, dashboards, consoles

115
00:06:16,760 --> 00:06:22,960
 and to your point, Chase, the need really is coming from the point of view of acceleration.

116
00:06:22,960 --> 00:06:31,760
 We have a, there's a lot of, we're going to use a lot of the same words here, I think.

117
00:06:31,760 --> 00:06:33,560
 And I like the IOT call out.

118
00:06:33,560 --> 00:06:37,320
 I think when we talk about edge, which is rare, we almost actually, we don't say edge

119
00:06:37,320 --> 00:06:42,160
 very often, but I think when in general we're talking about edge, we started to think about

120
00:06:42,160 --> 00:06:49,920
 it as almost like there's kind of like two sides of the edge and what Guillermo is talking

121
00:06:49,920 --> 00:06:53,440
 about and where we work, I think is on like, we call it the trusted side of the edge, which

122
00:06:53,440 --> 00:06:57,420
 is like, it's basically like compute we own that's close to people.

123
00:06:57,420 --> 00:07:02,720
 And so one, I love the Chick-fil-A Kubernetes call out because it's one of the most fascinating

124
00:07:02,720 --> 00:07:07,200
 thing, like an otherwise boring company has ever done, which it's worth Googling about

125
00:07:07,200 --> 00:07:08,480
 if you're not aware of it.

126
00:07:08,480 --> 00:07:15,040
 And then, but one of the, it's interesting to me how like the company is doing edge stuff

127
00:07:15,040 --> 00:07:20,080
 that people seem to care about are largely talking about like kind of compute you own

128
00:07:20,080 --> 00:07:23,040
 and trust where it's almost like multi-tenant compute resources.

129
00:07:23,040 --> 00:07:28,560
 You don't necessarily let everyone access it without some kind of off and like isolation

130
00:07:28,560 --> 00:07:33,200
 versus IOT, the stuff that's on the other side where it's like the untrusted side of

131
00:07:33,200 --> 00:07:34,200
 the edge.

132
00:07:34,200 --> 00:07:36,440
 And so, yeah, we think about it basically the same.

133
00:07:36,440 --> 00:07:42,720
 We just have this notion of trusted versus not, and we don't pay attention to the untrusted.

134
00:07:42,720 --> 00:07:46,520
 Before I pass it to Nick, I want to ask a question about the compute you own and trust.

135
00:07:46,520 --> 00:07:50,800
 Like how is that different than having a data center?

136
00:07:50,800 --> 00:07:51,800
 I'll back up.

137
00:07:51,800 --> 00:07:58,560
 When I was at Box, I remember one of our customers was evaluating, you know, moving to the cloud

138
00:07:58,560 --> 00:08:04,600
 and one of the soon to be customers, and they took us to their data center, which was just

139
00:08:04,600 --> 00:08:06,840
 above the cafeteria.

140
00:08:06,840 --> 00:08:11,120
 And they're like, yeah, we're basically like one spilled pot of oil in a fire away from

141
00:08:11,120 --> 00:08:13,000
 just losing all of our data.

142
00:08:13,000 --> 00:08:16,080
 But theoretically that's data that sits close to them, or compute that sits close to them

143
00:08:16,080 --> 00:08:17,080
 that they own.

144
00:08:17,080 --> 00:08:18,880
 So like, what's the difference here?

145
00:08:18,880 --> 00:08:20,000
 Oh, nothing.

146
00:08:20,000 --> 00:08:21,960
 I think that nobody wants to talk about that.

147
00:08:21,960 --> 00:08:27,280
 But like every data center on the planet is, you know, there's that kind of story.

148
00:08:27,280 --> 00:08:31,040
 And even when they build them to be all redundant and smart and on two power grids, there's

149
00:08:31,040 --> 00:08:35,960
 still some dude with like, you know, a nice stick leaning against the back door, propping

150
00:08:35,960 --> 00:08:38,640
 it open, but making sure no one goes in.

151
00:08:38,640 --> 00:08:44,840
 I think when like the one maybe like intrinsic difference, if you're building things for

152
00:08:44,840 --> 00:08:48,680
 the edge is you end up almost being kind of redundant by default.

153
00:08:48,680 --> 00:08:51,800
 So you become a little bit more resilient to coffee spills.

154
00:08:51,800 --> 00:08:58,520
 We see this actually with S3, we do a tremendous amount of access to S3, specifically in the

155
00:08:58,520 --> 00:09:00,880
 U.S. East one, which is Virginia.

156
00:09:00,880 --> 00:09:03,820
 And it's actually incredibly flaky all over the world.

157
00:09:03,820 --> 00:09:08,200
 And some of the, some of like what edge applications have been able to do is like, you'll see that

158
00:09:08,200 --> 00:09:11,000
 S3 stops working from Frankfurt.

159
00:09:11,000 --> 00:09:14,240
 And what can happen is like the health checks there can just stop working and traffic will

160
00:09:14,240 --> 00:09:16,400
 just route around Frankfurt at that point.

161
00:09:16,400 --> 00:09:21,920
 So if you imagine that S3 is a spilled coffee, you can kind of, you can kind of be a little

162
00:09:21,920 --> 00:09:22,920
 bit more resilient to that.

163
00:09:22,920 --> 00:09:26,720
 But I feel like that's like a, it's like a side effect of doing things this way.

164
00:09:26,720 --> 00:09:31,440
 It's not necessarily the reason you would move out of your one sketchy, grippy data

165
00:09:31,440 --> 00:09:32,520
 center.

166
00:09:32,520 --> 00:09:39,240
 I would add there's two adjacent concepts that get thrown into the same edge umbrella.

167
00:09:39,240 --> 00:09:46,200
 One really is what Kurt just said about resilience that comes from deploying globally by default,

168
00:09:46,200 --> 00:09:48,360
 being global first, right?

169
00:09:48,360 --> 00:09:52,000
 So when you come to a platform like Vercel, you're not really, we're not starting the

170
00:09:52,000 --> 00:09:55,840
 conversation by what region are you deploying in today?

171
00:09:55,840 --> 00:10:00,920
 And like switching dashboard context with like a city on the top right of the dashboard,

172
00:10:00,920 --> 00:10:07,080
 it's like something that comes with it, with the concept of deploying your workload globally.

173
00:10:07,080 --> 00:10:13,160
 But then the flip side of that too, is sometimes certain workloads do need to be co-located

174
00:10:13,160 --> 00:10:15,100
 to the data store as well.

175
00:10:15,100 --> 00:10:20,840
 So I think something that comes with this edge platforms is that flexibility with a

176
00:10:20,840 --> 00:10:22,960
 bias towards global, right?

177
00:10:22,960 --> 00:10:26,280
 So at the end of the day, there is a reality of sometimes the computer needs to live right

178
00:10:26,280 --> 00:10:27,280
 next to the data.

179
00:10:27,280 --> 00:10:33,520
 That's where I think all of us see more stress and more workloads in Virginia still, because

180
00:10:33,520 --> 00:10:38,740
 there's still a lot of gravity there, but I think we're opening the aperture to every

181
00:10:38,740 --> 00:10:45,200
 company by default to think about catering to visitors as close as possible to them and

182
00:10:45,200 --> 00:10:46,960
 co-locating our apps to them.

183
00:10:46,960 --> 00:10:47,960
 Totally.

184
00:10:47,960 --> 00:10:51,480
 You know, and I heard this on Twitter, I don't remember who tweeted it, so if you're going

185
00:10:51,480 --> 00:10:52,720
 to take credit, feel free.

186
00:10:52,720 --> 00:10:57,260
 But the way I think about the edge is if you draw a string, you've got a user, you've got

187
00:10:57,260 --> 00:11:01,260
 kind of the app server serving their requests, and maybe you've got the data stores that

188
00:11:01,260 --> 00:11:03,540
 are powering their request.

189
00:11:03,540 --> 00:11:08,880
 And historically, right, no matter where kind of the user was, they had this distance to

190
00:11:08,880 --> 00:11:12,320
 the application server that was longer depending on how far away they went.

191
00:11:12,320 --> 00:11:16,740
 Sure, you could slide it closer to some users, you could slide it farther away to get closer

192
00:11:16,740 --> 00:11:17,740
 to other users.

193
00:11:17,740 --> 00:11:23,040
 So you may be in the US East for kind of acceptable latency to California and to Europe.

194
00:11:23,040 --> 00:11:27,500
 You may be in Europe and have terrible latency to the West Coast of the United States, but

195
00:11:27,500 --> 00:11:30,460
 you kind of made that trade off with one string.

196
00:11:30,460 --> 00:11:34,660
 When you add in edge compute, you gain the ability to have a string per user, and sometimes

197
00:11:34,660 --> 00:11:36,300
 you can make that incredibly short.

198
00:11:36,300 --> 00:11:41,620
 So if you've got someone on a mobile device, you can have a 10, 15, 20 millisecond server

199
00:11:41,620 --> 00:11:45,460
 right away from them that can render their dashboard or that can load their information

200
00:11:45,460 --> 00:11:47,140
 incredibly fast.

201
00:11:47,140 --> 00:11:50,540
 And while this isn't a new concept, people always say the cloud is just someone else's

202
00:11:50,540 --> 00:11:54,240
 data center, well, the edge is just 75 of someone else's data centers.

203
00:11:54,240 --> 00:11:58,720
 Kind of the patterns and the abilities that we provide developers to be able to start

204
00:11:58,720 --> 00:12:04,120
 off with this by default, just makes the base case so much better than it was 10 years ago,

205
00:12:04,120 --> 00:12:06,760
 where you'd pick one, you'd build up all this gravity.

206
00:12:06,760 --> 00:12:10,540
 And I remember other companies I worked at, you'd say, well, to just add a second one

207
00:12:10,540 --> 00:12:11,840
 is like a monumental task.

208
00:12:11,840 --> 00:12:14,160
 We're going to rewrite the whole application.

209
00:12:14,160 --> 00:12:18,380
 The edge stops you from, you know, the edge pattern stops you from having to start off

210
00:12:18,380 --> 00:12:21,540
 under the assumption that you'll have to do that later on.

211
00:12:21,540 --> 00:12:23,660
 I love that visualization.

212
00:12:23,660 --> 00:12:27,780
 So I'm here in SF and say the app service in Virginia.

213
00:12:27,780 --> 00:12:34,320
 So I have one little dot in that string that is, okay, the distance between me and Virginia.

214
00:12:34,320 --> 00:12:38,420
 But now with edge compute, another notch that I would add to that visualization is I can

215
00:12:38,420 --> 00:12:45,380
 also place compute close to the visitor, even though I might still go to the origin to do

216
00:12:45,380 --> 00:12:46,540
 some of my compute.

217
00:12:46,540 --> 00:12:52,420
 So to bring this into a more concrete example, we have this product called edge middleware.

218
00:12:52,420 --> 00:12:59,460
 And what it's allowing folks to do is to progressively adopt the edge by hoisting some of the computation

219
00:12:59,460 --> 00:13:00,860
 close to the visitor.

220
00:13:00,860 --> 00:13:06,540
 So a lot of that routing layer, a lot of that AB testing, a lot of that load balancing,

221
00:13:06,540 --> 00:13:13,700
 we see a lot of incremental migration patterns to this new world of front end driven workloads

222
00:13:13,700 --> 00:13:17,940
 to headless where the customer might say, I'm going to use edge middleware.

223
00:13:17,940 --> 00:13:22,480
 I'm going to put compute right next to every visitor globally, and I'm gonna start distributing

224
00:13:22,480 --> 00:13:23,860
 the workloads.

225
00:13:23,860 --> 00:13:29,820
 So maybe most of my pages fall back to my old legacy model list, but the new ones go

226
00:13:29,820 --> 00:13:32,460
 to my new application that I'm developing.

227
00:13:32,460 --> 00:13:37,180
 And they're making that determination, that policy is being pushed to the edge.

228
00:13:37,180 --> 00:13:38,620
 That might not be where the story ends.

229
00:13:38,620 --> 00:13:43,520
 There might be more compute elsewhere down the pipe, but now they got that extra lever

230
00:13:43,520 --> 00:13:44,980
 and that extra knob.

231
00:13:44,980 --> 00:13:45,980
 Great example.

232
00:13:45,980 --> 00:13:49,260
 We actually use this in our product with Vercel.

233
00:13:49,260 --> 00:13:53,420
 Every time we have an incident, we have a nice little status that pops up right next

234
00:13:53,420 --> 00:13:56,660
 to the database page to make sure people know if they're experiencing issues.

235
00:13:56,660 --> 00:13:58,900
 We want to give them that information ASAP.

236
00:13:58,900 --> 00:14:03,260
 That's actually a Vercel edge middleware that goes back and calls our incident API and caches

237
00:14:03,260 --> 00:14:05,860
 the data for 10, 20 seconds.

238
00:14:05,860 --> 00:14:10,620
 So that pops up extremely quickly served very close to the user on a very short string.

239
00:14:10,620 --> 00:14:14,860
 Whereas the big heavy operations may go back to our kind of, let's say bigger database

240
00:14:14,860 --> 00:14:19,380
 servers over here, but we're able to get that and kind of decorate the page with that information

241
00:14:19,380 --> 00:14:21,480
 in an extremely low latency way.

242
00:14:21,480 --> 00:14:25,340
 That is a great experience for users.

243
00:14:25,340 --> 00:14:30,860
 Maybe digging deeper here, what are the key use cases that you're seeing driving Edge

244
00:14:30,860 --> 00:14:32,800
 Infra today?

245
00:14:32,800 --> 00:14:35,380
 Maybe Nick, maybe continue with your thought.

246
00:14:35,380 --> 00:14:38,520
 Yeah, no, and I think it's really similar to what I'm talking about.

247
00:14:38,520 --> 00:14:40,320
 It's a fantastic question.

248
00:14:40,320 --> 00:14:45,000
 Sometimes I think it's 50%, just the default way of doing things now, you know, you're

249
00:14:45,000 --> 00:14:48,700
 looking at it and you think, well, if I've got users all over the globe, the internet

250
00:14:48,700 --> 00:14:50,620
 is increasingly global.

251
00:14:50,620 --> 00:14:54,360
 You know, we're, we're selling, you know, you look at Facebook users, you look at these

252
00:14:54,360 --> 00:14:58,980
 big social media companies, the primary largest number of users are not in the United States

253
00:14:58,980 --> 00:14:59,980
 anymore.

254
00:14:59,980 --> 00:15:02,240
 They're in India, they're in, you know, all over.

255
00:15:02,240 --> 00:15:05,180
 And so you're looking at this and when you're a developer starting out, you think what's

256
00:15:05,180 --> 00:15:08,940
 the best way that I can serve that global audience.

257
00:15:08,940 --> 00:15:10,760
 Why would you pick something worse?

258
00:15:10,760 --> 00:15:15,740
 And so you're looking at being able to get data stores, applications, and build tools

259
00:15:15,740 --> 00:15:19,460
 that just work with that foundation from day one.

260
00:15:19,460 --> 00:15:22,760
 And if you can do that, if you can kind of build that in from the ground up, you never

261
00:15:22,760 --> 00:15:24,560
 have to worry about adding it back on.

262
00:15:24,560 --> 00:15:28,920
 So I think half of it is honestly just, it's the best thing to build the best product.

263
00:15:28,920 --> 00:15:31,880
 The other half of it, I think is just frankly, even performance.

264
00:15:31,880 --> 00:15:37,800
 Then we spend so much time of our lives optimizing five milliseconds here, 10 milliseconds here,

265
00:15:37,800 --> 00:15:44,820
 the edge paradigm can cut 20, 50%, 75% of a request just kind of by opting in.

266
00:15:44,820 --> 00:15:47,280
 And that's like handy to a baby.

267
00:15:47,280 --> 00:15:52,420
 You know, you're like, why wouldn't I try and go get that better page load time, that

268
00:15:52,420 --> 00:15:54,240
 faster documentation site.

269
00:15:54,240 --> 00:15:59,160
 That's what we spend our lives optimizing and the edge just makes it so much easier.

270
00:15:59,160 --> 00:16:05,380
 We see a, I think a similar thing and I've sort of, if you imagine like kind of game

271
00:16:05,380 --> 00:16:11,640
 features and apps, what's been interesting to me is how many people want to build things

272
00:16:11,640 --> 00:16:17,020
 that look vaguely like game features into even like boring line of business applications.

273
00:16:17,020 --> 00:16:22,740
 And it's because we all, at this point of like we use discord and we look at things

274
00:16:22,740 --> 00:16:25,600
 like Excalidraw, right?

275
00:16:25,600 --> 00:16:28,220
 And Figma, and we all know how these things work.

276
00:16:28,220 --> 00:16:32,940
 And I think there's this developer emotion where it's like, I could imagine how to apply

277
00:16:32,940 --> 00:16:37,940
 like this kind of trick to this internal invoicing site I'm having to build at my day job.

278
00:16:37,940 --> 00:16:44,260
 And so that pushes a little bit of that where you'd like, there are reasons to have really

279
00:16:44,260 --> 00:16:47,220
 quick interactions with the server outside of a page view.

280
00:16:47,220 --> 00:16:50,140
 And a lot of it is kind of driven by those gamified features.

281
00:16:50,140 --> 00:16:55,020
 And I think that some of it is it's the default because this is the right way to do this for

282
00:16:55,020 --> 00:16:58,420
 the types of apps people want to build, which actually makes probably all of our lives much

283
00:16:58,420 --> 00:17:01,980
 easier at this point than it would have been like five years ago.

284
00:17:01,980 --> 00:17:06,440
 But it's a lot of it's really neat to watch developers like discover a way of doing things

285
00:17:06,440 --> 00:17:11,220
 and then influence the world to make it possible, which seems to be what's happening right now.

286
00:17:11,220 --> 00:17:18,300
 Yeah, to add to that, I think what drives a lot of that developer inclination to use

287
00:17:18,300 --> 00:17:24,140
 edge is also that modern frameworks are becoming edge first as well.

288
00:17:24,140 --> 00:17:31,820
 So Next.js, Astro, Remix, all the frameworks for building for the web are also agreeing

289
00:17:31,820 --> 00:17:36,980
 that if we want to drive performance, if we want to drive personalization, they have to

290
00:17:36,980 --> 00:17:42,860
 start adopting the runtimes that edge compute platforms optimized for.

291
00:17:42,860 --> 00:17:44,660
 So there's that.

292
00:17:44,660 --> 00:17:47,440
 I think there's that developer desire.

293
00:17:47,440 --> 00:17:51,060
 There is the need for speed that Nick talked about.

294
00:17:51,060 --> 00:17:54,420
 I can confirm they've optimized their docs side beyond belief.

295
00:17:54,420 --> 00:18:00,820
 I was actually talking to one of the PlanetScale engineers and his deadline, his goal was 50

296
00:18:00,820 --> 00:18:01,820
 seconds.

297
00:18:01,820 --> 00:18:04,140
 Like, I'm really enjoying this conversation right now.

298
00:18:04,140 --> 00:18:05,140
 Awesome.

299
00:18:05,140 --> 00:18:07,760
 And the third one I want to add is cost.

300
00:18:07,760 --> 00:18:15,060
 So we're in an environment that is really tightening the belts of a lot of businesses.

301
00:18:15,060 --> 00:18:21,860
 And the edge might sound like a fancy new thing that adds to your expenses, but I would

302
00:18:21,860 --> 00:18:23,740
 argue that it's the opposite, right?

303
00:18:23,740 --> 00:18:31,580
 So number one, the compute runtimes that run edge workloads are cheaper.

304
00:18:31,580 --> 00:18:34,540
 They're optimized for really fast cold boots.

305
00:18:34,540 --> 00:18:36,240
 They scale to zero.

306
00:18:36,240 --> 00:18:39,520
 That's the case of edge functions and edge middleware on Vercel.

307
00:18:39,520 --> 00:18:42,480
 So they're fundamentally more cost effective.

308
00:18:42,480 --> 00:18:48,240
 And also going back to that analogy of like, you're adding that notch to the thread to

309
00:18:48,240 --> 00:18:51,200
 start processing the request earlier.

310
00:18:51,200 --> 00:18:56,580
 Now we have the opportunity to resolve the request from cached data.

311
00:18:56,580 --> 00:19:02,320
 This might sound small, but I talked to customers that have massive legacy backends or have

312
00:19:02,320 --> 00:19:08,660
 major agreements where they're paying by API call to their vendor.

313
00:19:08,660 --> 00:19:13,680
 So now if I'm caching at the edge while still being dynamic, because that's a killer feature,

314
00:19:13,680 --> 00:19:18,560
 I think, and personalized, now I'm reducing your backend bill.

315
00:19:18,560 --> 00:19:22,400
 Now with also technologies that would plan scale is bringing to market in terms of pushing

316
00:19:22,400 --> 00:19:26,200
 caches automatically closer to the user.

317
00:19:26,200 --> 00:19:30,020
 Now I'm hitting the core database workload less.

318
00:19:30,020 --> 00:19:35,500
 So the funny thing is that it's both exciting and a new toy for developers and improves

319
00:19:35,500 --> 00:19:38,180
 your efficiency as a business.

320
00:19:38,180 --> 00:19:51,000
 Yeah, this raises a question about whether this is the right design paradigm or design

321
00:19:51,000 --> 00:19:53,180
 approach for all applications.

322
00:19:53,180 --> 00:20:00,380
 And so surely this is the right decision for some, but it can't be, is it a panacea for

323
00:20:00,380 --> 00:20:01,380
 all of them?

324
00:20:01,380 --> 00:20:05,540
 Is this the final frontier of software infrastructure and all applications are going to be built

325
00:20:05,540 --> 00:20:06,540
 this way?

326
00:20:06,540 --> 00:20:12,660
 Like, where is this the right decision and where is this the wrong choice?

327
00:20:12,660 --> 00:20:14,260
 And I'll open this up to anyone.

328
00:20:14,260 --> 00:20:17,260
 I see Kurt smiling.

329
00:20:17,260 --> 00:20:21,900
 I'm also having a good laugh, but Kurt, go ahead.

330
00:20:21,900 --> 00:20:28,420
 I feel like this is the right choice for basically new apps with users.

331
00:20:28,420 --> 00:20:33,220
 It's not, and I think the interesting thing about internet infrastructure is that it's

332
00:20:33,220 --> 00:20:35,380
 almost additive.

333
00:20:35,380 --> 00:20:41,740
 And so it's not the right choice for existing clouds and existing workloads, but if you're

334
00:20:41,740 --> 00:20:48,020
 shipping an app that has humans use it, it's hard to argue that it's not the best way to

335
00:20:48,020 --> 00:20:51,020
 do it at this point in time.

336
00:20:51,020 --> 00:20:56,760
 And I think we're probably all pretty excited because there's a bigger market that doesn't

337
00:20:56,760 --> 00:21:02,240
 exist yet that's going to come from these things than there already is in the world.

338
00:21:02,240 --> 00:21:07,120
 So investors love to ask is probably like, well, what do you got to do to shift workloads

339
00:21:07,120 --> 00:21:08,120
 from existing things?

340
00:21:08,120 --> 00:21:10,080
 We just have to wait.

341
00:21:10,080 --> 00:21:11,080
 It'll happen.

342
00:21:11,080 --> 00:21:15,980
 So my hot take is it's absolutely the right choice for all apps with users right now.

343
00:21:15,980 --> 00:21:21,480
 And then the cold take is the interesting thing about compute, like localized compute

344
00:21:21,480 --> 00:21:27,240
 like this is if you have eyeballs, you tend to actually have a burst of compute needs

345
00:21:27,240 --> 00:21:30,480
 where the sun's up, but it also means you have a very cheap compute where it's dark

346
00:21:30,480 --> 00:21:31,480
 in the world.

347
00:21:31,480 --> 00:21:37,860
 So I think there's a lot of really interesting models for balancing workloads based on latency

348
00:21:37,860 --> 00:21:39,860
 sensitivity in both directions.

349
00:21:39,860 --> 00:21:44,160
 I think there's a chance to actually say this really doesn't need to be close to people,

350
00:21:44,160 --> 00:21:46,060
 so run it where it's cheap.

351
00:21:46,060 --> 00:21:50,840
 And I think we might start seeing a little bit of that on some platforms over the next

352
00:21:50,840 --> 00:21:53,840
 couple of years.

353
00:21:53,840 --> 00:21:57,900
 There was a comment earlier, I think it's Guillermo, who said that there's new languages

354
00:21:57,900 --> 00:22:01,120
 and frameworks that are more edge native.

355
00:22:01,120 --> 00:22:07,720
 So those workloads that are user facing and therefore under the definition put forth are

356
00:22:07,720 --> 00:22:09,160
 better suited for the edge.

357
00:22:09,160 --> 00:22:13,720
 Does that mean that people who have built applications in the old paradigm could rewrite

358
00:22:13,720 --> 00:22:16,960
 those in these edge native languages and frameworks?

359
00:22:16,960 --> 00:22:23,760
 Or is there a way to carry some of the stuff that some of my partners used decades ago

360
00:22:23,760 --> 00:22:27,120
 forward?

361
00:22:27,120 --> 00:22:34,480
 One thing to keep in mind is that the pendulum is swinging, maybe you can argue back to the

362
00:22:34,480 --> 00:22:38,320
 server from the client heavy applications, right?

363
00:22:38,320 --> 00:22:41,780
 So that this is the fundamental thing that we've been seeing for a number of years now,

364
00:22:41,780 --> 00:22:47,600
 but it's really becoming the default now, React server components.

365
00:22:47,600 --> 00:22:51,800
 React and create React app is to say, put all your logic on the client.

366
00:22:51,800 --> 00:22:54,320
 Now it's default server.

367
00:22:54,320 --> 00:22:58,400
 And if you're visualizing the pendulum swinging back, the pendulum is actually making a pit

368
00:22:58,400 --> 00:23:01,800
 stop at the edge before it goes to origin.

369
00:23:01,800 --> 00:23:08,000
 So that's what we mean when we mean edge first is push the code to the cloud in default to

370
00:23:08,000 --> 00:23:11,760
 try and put it as close as possible to the visitor.

371
00:23:11,760 --> 00:23:18,040
 But if not still put it in the cloud, because I would argue you get the better performance,

372
00:23:18,040 --> 00:23:22,520
 the size of the server is larger typically than the size of the client.

373
00:23:22,520 --> 00:23:25,960
 So it scales better with product maturity.

374
00:23:25,960 --> 00:23:31,280
 Imagine an app where you've added tons of feature flags, tons of components, tons of

375
00:23:31,280 --> 00:23:37,080
 styles, the single page application model, the client model just over time collapses

376
00:23:37,080 --> 00:23:41,540
 in its own weight, whereas there's plenty of space in the cloud.

377
00:23:41,540 --> 00:23:44,800
 So that's, I think one of the things that makes it such a good starting point.

378
00:23:44,800 --> 00:23:47,720
 You really have to look toward the future.

379
00:23:47,720 --> 00:23:51,300
 Sometimes it might seem like you can take the shortcut and say, oh, I can totally make

380
00:23:51,300 --> 00:23:53,340
 a client app here.

381
00:23:53,340 --> 00:23:57,160
 But I think you have to think about, okay, where's the product that you're on the line?

382
00:23:57,160 --> 00:24:01,740
 And the other thing I love about the edge is I get that control over the security of

383
00:24:01,740 --> 00:24:06,920
 the code and the cache invalidation and population.

384
00:24:06,920 --> 00:24:11,840
 So I don't have to worry about what state is the client in right now.

385
00:24:11,840 --> 00:24:16,300
 Are they seeing more information they should have if their administrator tweaked a permission

386
00:24:16,300 --> 00:24:17,680
 or a policy?

387
00:24:17,680 --> 00:24:23,940
 So because I have control over the edge and server environment, I can make more secure

388
00:24:23,940 --> 00:24:24,940
 applications.

389
00:24:24,940 --> 00:24:28,140
 That's the core argument I think for why not client.

390
00:24:28,140 --> 00:24:32,240
 I love your pendulum analogy and talking about kind of having a stop.

391
00:24:32,240 --> 00:24:37,260
 I think my maybe hot take, maybe just pragmatic take on this, I certainly view it as pragmatic

392
00:24:37,260 --> 00:24:43,340
 is that you can also swing that pendulum too far and kind of over engineer and over architect

393
00:24:43,340 --> 00:24:44,340
 yourself.

394
00:24:44,340 --> 00:24:48,640
 There are some data stores and there are some times where you have to make the round trip

395
00:24:48,640 --> 00:24:49,840
 to US East.

396
00:24:49,840 --> 00:24:55,700
 You have to make the round trip to the core data store, the API that powers your business.

397
00:24:55,700 --> 00:24:58,700
 And the goal of the edge is not to eliminate that.

398
00:24:58,700 --> 00:25:01,460
 The goal is to make it as fast as possible.

399
00:25:01,460 --> 00:25:04,680
 And the goal is to maybe minimize the time you have to do that.

400
00:25:04,680 --> 00:25:08,820
 But when we talk about, here at PlanetScale, we run a database.

401
00:25:08,820 --> 00:25:13,660
 We have really strict consistency and really strict policies about making sure we don't

402
00:25:13,660 --> 00:25:16,100
 lose data and things like that.

403
00:25:16,100 --> 00:25:21,620
 And so at times you kind of have to centralize on one server or a handful of servers located

404
00:25:21,620 --> 00:25:22,620
 in a data center.

405
00:25:22,620 --> 00:25:24,720
 And you can't get around that.

406
00:25:24,720 --> 00:25:28,380
 Now you can cache, you can incrementally move compute to the edge.

407
00:25:28,380 --> 00:25:32,820
 You can move cache data stores to the edge and you absolutely should do that.

408
00:25:32,820 --> 00:25:34,220
 But I'm a very pragmatic person.

409
00:25:34,220 --> 00:25:39,040
 And when I set out, I take a look at what my frameworks, what my deployment tools and

410
00:25:39,040 --> 00:25:44,340
 things like that are letting me do and pick kind of the right model for the right job.

411
00:25:44,340 --> 00:25:47,480
 Because you can't take shortcuts with resiliency.

412
00:25:47,480 --> 00:25:50,760
 You can't take shortcuts with consistency and things like that.

413
00:25:50,760 --> 00:25:57,100
 So pick the right task, pick the right place to put your data, to put your compute and

414
00:25:57,100 --> 00:25:58,100
 things like that.

415
00:25:58,100 --> 00:26:02,620
 And just understand that you don't have to be 100% over here, 100% over here.

416
00:26:02,620 --> 00:26:07,360
 You can run all of these frameworks in a old style, mainframe.

417
00:26:07,360 --> 00:26:09,980
 There's just one of them, just as easily as you can run them on the edge.

418
00:26:09,980 --> 00:26:14,640
 Now I wouldn't recommend going out and calling your IBM salesperson, but use the right tool

419
00:26:14,640 --> 00:26:16,300
 for the right job.

420
00:26:16,300 --> 00:26:17,580
 That's kind of my view on all of this.

421
00:26:17,580 --> 00:26:21,820
 It sounds simple, but it often isn't, especially when the technology is becoming much more

422
00:26:21,820 --> 00:26:24,460
 complicated for a good reason.

423
00:26:24,460 --> 00:26:27,900
 But it requires you to kind of learn a lot more and understand a lot more of what's going

424
00:26:27,900 --> 00:26:29,420
 on behind the scenes.

425
00:26:29,420 --> 00:26:31,900
 I actually love the consistency point.

426
00:26:31,900 --> 00:26:36,340
 I think that we're kind of talking about how devs have decided they want things to be fast

427
00:26:36,340 --> 00:26:38,920
 for their users.

428
00:26:38,920 --> 00:26:43,740
 And I think one thing that we've seen from devs over the last 10 plus years is they also

429
00:26:43,740 --> 00:26:47,280
 really thrive with strong consistency.

430
00:26:47,280 --> 00:26:52,520
 I think that if you're building an app and it has a database, it's much simpler to think

431
00:26:52,520 --> 00:26:55,960
 about things with strong consistency and to think about my right is going to happen and

432
00:26:55,960 --> 00:26:57,880
 it's going to be reflected.

433
00:26:57,880 --> 00:27:04,040
 And what's kind of neat, I think about what's happened with Edge right now, and what's neat

434
00:27:04,040 --> 00:27:08,740
 about developers driving this is it's not if you rewound eight, 12 years and wrote them

435
00:27:08,740 --> 00:27:12,740
 like red papers about how people thought this was going to work.

436
00:27:12,740 --> 00:27:19,120
 I think what they wouldn't have said is we're going to start pushing for SQLite as a database

437
00:27:19,120 --> 00:27:25,020
 for an app like Remix is doing, or PlanetScale is going to ship this excellent MySQL thing

438
00:27:25,020 --> 00:27:27,780
 that it's like a lot of old is new again.

439
00:27:27,780 --> 00:27:32,500
 I think the neat thing about, Chase, you're talking about your old apps is like a PHP

440
00:27:32,500 --> 00:27:36,200
 app with MySQL runs incredibly well at the Edge right now.

441
00:27:36,200 --> 00:27:37,200
 There's a model for this.

442
00:27:37,200 --> 00:27:39,240
 We're not like throwing a bunch of stuff out.

443
00:27:39,240 --> 00:27:43,340
 We're taking the stuff that makes sense for devs and has made sense.

444
00:27:43,340 --> 00:27:46,720
 And we've learned, we've tried out all these different things and in some ways gone back

445
00:27:46,720 --> 00:27:50,260
 and then also added these new capabilities to it, which is it makes the curmudgeon in

446
00:27:50,260 --> 00:27:53,500
 me really happy that like relational databases are still cool.

447
00:27:53,500 --> 00:27:54,860
 It's still a cool way to do stuff.

448
00:27:54,860 --> 00:27:56,900
 So I love the consistency point.

449
00:27:56,900 --> 00:28:03,220
 You mentioned SQLite, it would be remiss of us not to bring up DuckDB.

450
00:28:03,220 --> 00:28:07,420
 I mean, to anyone, talk to me, why is this exciting?

451
00:28:07,420 --> 00:28:08,420
 What's happening?

452
00:28:08,420 --> 00:28:10,020
 How are you leveraging that today?

453
00:28:10,020 --> 00:28:14,260
 Maybe, Kurt, take it.

454
00:28:14,260 --> 00:28:15,960
 I've been fiddling with DuckDB.

455
00:28:15,960 --> 00:28:21,740
 I'm really intrigued by kind of end process databases.

456
00:28:21,740 --> 00:28:26,560
 I think one of the things, Guillermo keeps pointing out or has pointed out that a lot

457
00:28:26,560 --> 00:28:30,780
 of this is shifting back from client to kind of server components.

458
00:28:30,780 --> 00:28:35,460
 And someone I work with, this is not a knock against PlanetScale.

459
00:28:35,460 --> 00:28:36,460
 I'm going to be very nice here.

460
00:28:36,460 --> 00:28:37,460
 I love PlanetScale.

461
00:28:37,460 --> 00:28:41,580
 I think MySQL is amazing and like we would use it for a lot of apps and a lot of customers

462
00:28:41,580 --> 00:28:42,580
 do.

463
00:28:42,580 --> 00:28:47,140
 But in some ways, one of the reasons CDNs exist in the form they exist in is because

464
00:28:47,140 --> 00:28:51,380
 the deployment model for WordPress was so terrible and MySQL is such a pain in the ass

465
00:28:51,380 --> 00:28:53,680
 for people to use.

466
00:28:53,680 --> 00:28:57,660
 And so we got to these static files that are very easy to send around.

467
00:28:57,660 --> 00:29:03,340
 I think the neat thing about things like DuckDB and SQLite and any other kind of end process

468
00:29:03,340 --> 00:29:10,060
 database is you can have a dynamic server side application that's almost as reliable

469
00:29:10,060 --> 00:29:16,340
 and almost as kind of resilient as a static site you put on a CDN.

470
00:29:16,340 --> 00:29:24,200
 Our holy grail for this is if you uploaded your 50 file static site to a CDN five years

471
00:29:24,200 --> 00:29:26,760
 ago and then you go load it today, it probably still works.

472
00:29:26,760 --> 00:29:27,960
 You haven't run out of RAM.

473
00:29:27,960 --> 00:29:30,580
 You haven't filled up a disk or anything like that.

474
00:29:30,580 --> 00:29:34,180
 And I think these embedded databases let you do, it's a little bit more like shipping a

475
00:29:34,180 --> 00:29:35,180
 spreadsheet around.

476
00:29:35,180 --> 00:29:40,140
 It lets you ship data and logic together in a way that I think extends that to make it

477
00:29:40,140 --> 00:29:42,960
 much more powerful than just the static site could have been.

478
00:29:42,960 --> 00:29:44,280
 I couldn't agree more, Kurt.

479
00:29:44,280 --> 00:29:49,360
 And for what it's worth, I'm under no auspices that MySQL is not difficult to use.

480
00:29:49,360 --> 00:29:52,520
 That's in fact, if it were too easy, I'm not sure we'd have a business.

481
00:29:52,520 --> 00:29:56,160
 So by all means, don't run your own MySQL, use PlanetScale instead.

482
00:29:56,160 --> 00:30:02,320
 But one piece of that, and I really love the kind of shipping a spreadsheet and the logic,

483
00:30:02,320 --> 00:30:05,000
 and this is exactly how I think about it.

484
00:30:05,000 --> 00:30:07,440
 Durability and consistency again is very hard.

485
00:30:07,440 --> 00:30:11,040
 So the simpler you can make the data model at the very back end, the easier it is for

486
00:30:11,040 --> 00:30:13,740
 you to maintain that durability and consistency.

487
00:30:13,740 --> 00:30:17,620
 The easier it is for you to ship all of that to the edge and say, let's let an edge function

488
00:30:17,620 --> 00:30:20,700
 on a very fast server, just pull the raw data in.

489
00:30:20,700 --> 00:30:24,780
 It's much faster than kind of doing all of that computing super far away.

490
00:30:24,780 --> 00:30:29,180
 And then let's ship that with a DuckDB to the user, let them modify and actually run

491
00:30:29,180 --> 00:30:33,380
 this dashboard right in their browser with a server 20 milliseconds away.

492
00:30:33,380 --> 00:30:36,380
 Whenever they click save, sure, you have to send all of that data back.

493
00:30:36,380 --> 00:30:40,940
 And we understand that's a round trip around the world, but you get this beautiful interactive

494
00:30:40,940 --> 00:30:45,460
 browser experience or application experience, and all you have to do is talk to the edge.

495
00:30:45,460 --> 00:30:48,000
 So again, that's why I love the string analogy.

496
00:30:48,000 --> 00:30:52,260
 The more that you can keep a user interaction on the shortest string possible, the better

497
00:30:52,260 --> 00:30:53,360
 you'll be.

498
00:30:53,360 --> 00:30:56,380
 And knowing at the end of the day, there's this long string out there that you have to

499
00:30:56,380 --> 00:31:01,280
 use, but let's try and make it as short as possible as often as possible.

500
00:31:01,280 --> 00:31:07,420
 I wanted to paint a picture because I really agree with Kurt, where he mentioned that a

501
00:31:07,420 --> 00:31:16,460
 lot of folks assumed that the best cloud database that we could get is putting stock MySQL in

502
00:31:16,460 --> 00:31:18,820
 some container or VBS somewhere.

503
00:31:18,820 --> 00:31:23,340
 And then they thought I must add more layers, more complexity in order to scale that.

504
00:31:23,340 --> 00:31:28,540
 But now imagine for a second that that idea that the database doesn't scale goes away.

505
00:31:28,540 --> 00:31:35,180
 Like how much simpler does the cloud get if I have databases like PlanetScale or Neon

506
00:31:35,180 --> 00:31:37,340
 that just scale?

507
00:31:37,340 --> 00:31:41,500
 Of course they have consumption based models and things like that.

508
00:31:41,500 --> 00:31:43,840
 Anytime something scales, it costs money, of course.

509
00:31:43,840 --> 00:31:48,040
 But I think it's remarkable because the reason that we're seeing that pendulum swing back

510
00:31:48,040 --> 00:31:55,200
 as well is that I think inside of all of us, there is a PHP developer that longs for, I'm

511
00:31:55,200 --> 00:32:00,580
 just opening a tag and writing my SQL query to PlanetScale.

512
00:32:00,580 --> 00:32:03,960
 And maybe that evolves into like it's React server components now.

513
00:32:03,960 --> 00:32:07,360
 But just the simplicity of that model is so compelling.

514
00:32:07,360 --> 00:32:11,020
 And you think now we've figured out how to scale those databases.

515
00:32:11,020 --> 00:32:17,020
 Sam, the CEO of PlanetScale was at GitHub where, I mean, all of GitHub and it's bazillion

516
00:32:17,020 --> 00:32:21,180
 dollar business runs on Vtes in MySQL.

517
00:32:21,180 --> 00:32:26,520
 And there was a ton of learnings on how to scale that, but now that's being offered as

518
00:32:26,520 --> 00:32:31,400
 a service and Vercel Developer can install that database with one click.

519
00:32:31,400 --> 00:32:38,060
 So I'm really excited about just how easy we're making scaling to remarkable sizes and

520
00:32:38,060 --> 00:32:40,820
 also getting started in like a couple of seconds.

521
00:32:40,820 --> 00:32:47,620
 So I'm really excited about SQLite and DuckDB, but I think it's also worth pointing out that

522
00:32:47,620 --> 00:32:52,540
 we're now dealing with a new generation of databases that have been built for the cloud

523
00:32:52,540 --> 00:32:55,860
 and it's worth trying them out.

524
00:32:55,860 --> 00:32:59,020
 We have a special guest in the audience today.

525
00:32:59,020 --> 00:33:02,960
 I invited Chad GPT and posed a question.

526
00:33:02,960 --> 00:33:03,960
 I seriously did this.

527
00:33:03,960 --> 00:33:08,040
 I actually said, here are the people who are talking, what questions do you have for them?

528
00:33:08,040 --> 00:33:10,160
 This is the question that came back.

529
00:33:10,160 --> 00:33:15,900
 How do you handle data replication and consistency across multiple edge locations?

530
00:33:15,900 --> 00:33:20,780
 And I think, well, props to them and our friends at OpenAI, but I think this fits into the

531
00:33:20,780 --> 00:33:24,600
 discussion nicely because there are definitely use cases where you can ship the spreadsheet

532
00:33:24,600 --> 00:33:27,140
 quote unquote to the user alongside the computer.

533
00:33:27,140 --> 00:33:33,000
 But there are also use cases where you need some sort of eventual consistency for some

534
00:33:33,000 --> 00:33:38,900
 data that is being accumulated or stored somewhere else just through the nature of that application.

535
00:33:38,900 --> 00:33:44,900
 And so what are the situations where data needs to be...

536
00:33:44,900 --> 00:33:50,700
 Will data always be near the user or will we always have this centralized cap theorem

537
00:33:50,700 --> 00:33:52,300
 challenge?

538
00:33:52,300 --> 00:33:53,300
 I'm happy to start off.

539
00:33:53,300 --> 00:33:57,640
 And I think the fact of the matter is that sometimes the data is going to be far away

540
00:33:57,640 --> 00:33:58,640
 from the user.

541
00:33:58,640 --> 00:34:02,360
 This actually used to be an interview question of mine that I would ask, but imagine you're

542
00:34:02,360 --> 00:34:05,780
 using Google or Facebook or a big website.

543
00:34:05,780 --> 00:34:09,400
 You're at JFK in New York, you're about to board a plane to Paris.

544
00:34:09,400 --> 00:34:14,640
 You post something, you hop on the plane and you get off nine hours later.

545
00:34:14,640 --> 00:34:17,920
 How can your data be closer to you there?

546
00:34:17,920 --> 00:34:19,360
 Facebook doesn't know you're going to Paris.

547
00:34:19,360 --> 00:34:20,360
 It has no idea.

548
00:34:20,360 --> 00:34:24,780
 So you have to implement some sort of system where you either move the data closer to the

549
00:34:24,780 --> 00:34:29,780
 user when they use it or you have to start calling back from far away.

550
00:34:29,780 --> 00:34:33,480
 But at the end of the day, the one thing that we all can't solve is, would that we could

551
00:34:33,480 --> 00:34:37,920
 here at PlanetScale, would that we would anywhere, is that when computers synchronize and when

552
00:34:37,920 --> 00:34:41,700
 you get the level of consistency that some applications require, you've got to have two

553
00:34:41,700 --> 00:34:43,620
 computers talk to each other.

554
00:34:43,620 --> 00:34:46,240
 And those two computers may have to talk to each other from far away.

555
00:34:46,240 --> 00:34:49,260
 So there's a whole lot of work that you can do to optimize that.

556
00:34:49,260 --> 00:34:51,020
 There are great data stores.

557
00:34:51,020 --> 00:34:53,180
 There are great kind of systems for doing this.

558
00:34:53,180 --> 00:34:57,580
 But ultimately, the cost to really synchronize and the cost to really kind of get the level

559
00:34:57,580 --> 00:35:01,800
 of consistency, availability and durability that you need.

560
00:35:01,800 --> 00:35:05,600
 You do have to have some computers talk to each other across the Internet and you do

561
00:35:05,600 --> 00:35:10,220
 have to at least pay a little bit of cost in order for that to happen across geographies.

562
00:35:10,220 --> 00:35:15,280
 Or you end up with a situation where it's more eventual than consistent.

563
00:35:15,280 --> 00:35:16,700
 And users will notice that, right?

564
00:35:16,700 --> 00:35:20,440
 Users expect that when they click post and they refresh, that post is there.

565
00:35:20,440 --> 00:35:23,600
 So there are some kind of things that you just can't avoid.

566
00:35:23,600 --> 00:35:28,520
 The trick, I think, is that Edge and kind of all of this new technology gives you the

567
00:35:28,520 --> 00:35:31,400
 ability to avoid that in the 90 percent case.

568
00:35:31,400 --> 00:35:35,120
 Whereas before you're paying your worst cost every request, now you're only doing that

569
00:35:35,120 --> 00:35:36,440
 when you absolutely need to.

570
00:35:36,440 --> 00:35:43,200
 And that's, I think, that's really the secret sauce when we talk about a lot of this.

571
00:35:43,200 --> 00:35:48,200
 To add to that, the way that I think about Vercel a lot in terms of our Edge infrastructure

572
00:35:48,200 --> 00:35:56,380
 is that more so the compute layer, we're basically like a global distributed key value store

573
00:35:56,380 --> 00:36:04,000
 that has a lot of facilities for caching, invalidating those caches and distributing

574
00:36:04,000 --> 00:36:09,040
 the knowledge that those caches have been invalidated at planet scale.

575
00:36:09,040 --> 00:36:15,680
 So I think to your point, the Edge and adding this ability to cache closer to the user whenever

576
00:36:15,680 --> 00:36:19,380
 the eventually consistent data model fits.

577
00:36:19,380 --> 00:36:24,520
 Now it turns out it fits for a lot of really high traffic events, right?

578
00:36:24,520 --> 00:36:30,480
 Like whether it's that you're going to some e-commerce website during Black Friday and

579
00:36:30,480 --> 00:36:34,380
 there's a bunch of data that doesn't need to be fetched from origin, right?

580
00:36:34,380 --> 00:36:36,200
 Like the product description.

581
00:36:36,200 --> 00:36:39,700
 Now there's a caveat from like the old days of the legacy CDN, right?

582
00:36:39,700 --> 00:36:43,960
 Like I might be fetching data that has been already filtered down and personalized for

583
00:36:43,960 --> 00:36:44,960
 me.

584
00:36:44,960 --> 00:36:48,860
 It might be because I'm in California and I get the offers for California, or it might

585
00:36:48,860 --> 00:36:54,280
 be a certain promotion, or it might be the CMS content that's been A/B tested, but all

586
00:36:54,280 --> 00:37:00,280
 of that can basically be hoisted and be stored temporarily or for a longer duration as close

587
00:37:00,280 --> 00:37:01,920
 as possible to the visitor.

588
00:37:01,920 --> 00:37:07,960
 But then there is the harder problems of like, if I have an internal app, if I have a feed,

589
00:37:07,960 --> 00:37:14,080
 so going to that Facebook example or the Twitter example, it gets harder to cache that data.

590
00:37:14,080 --> 00:37:19,200
 You might actually be stale and I want to know exactly how many likes I have right now.

591
00:37:19,200 --> 00:37:25,240
 So I think it really depends on each type of application, what we can do and what possibilities

592
00:37:25,240 --> 00:37:28,040
 the Edge opens up in terms of global data.

593
00:37:28,040 --> 00:37:35,560
 Yeah, I think that makes a ton of sense.

594
00:37:35,560 --> 00:37:39,800
 I think the interesting thing about the apps developers are building is we look at something

595
00:37:39,800 --> 00:37:43,900
 like PlanetScale and think, "Hey, this is useful for most apps."

596
00:37:43,900 --> 00:37:50,000
 It's kind of like a universally useful thing to put behind applications.

597
00:37:50,000 --> 00:37:54,560
 But I think one of the most interesting things about data as people start building things

598
00:37:54,560 --> 00:37:59,440
 around the world is when you kind of break out of that for very specific purposes.

599
00:37:59,440 --> 00:38:02,340
 So I talk about game servers all the time.

600
00:38:02,340 --> 00:38:05,920
 It's such a great model because in some ways Edge gets really interesting when you have

601
00:38:05,920 --> 00:38:10,820
 two users that want to kind of share a memory space basically, which is a way you would

602
00:38:10,820 --> 00:38:17,520
 implement a game server, do like very high volume events that are built Figma basically.

603
00:38:17,520 --> 00:38:21,000
 And a lot of the trick then becomes it's strings.

604
00:38:21,000 --> 00:38:25,680
 And what you end up doing is you have a person in London and a person in Sydney, and then

605
00:38:25,680 --> 00:38:30,240
 you end up wanting to connect them to a server in Chicago because that's the most optimal

606
00:38:30,240 --> 00:38:33,380
 place to attach them around the world.

607
00:38:33,380 --> 00:38:37,800
 And their apps still using PlanetScale, but you start busting out and coming up with these

608
00:38:37,800 --> 00:38:43,200
 kind of things that aren't quite databases, but involve persistence, involve sharing data,

609
00:38:43,200 --> 00:38:44,620
 I think are really fascinating.

610
00:38:44,620 --> 00:38:48,880
 And this is why one of the hottest things you'll hear about at conferences now is things

611
00:38:48,880 --> 00:38:54,200
 like CRDTs because what we're learning is all of these little tricks for managing eventual

612
00:38:54,200 --> 00:38:59,920
 consistency, propagating changes as fast as we can to where people are nearby, and then

613
00:38:59,920 --> 00:39:02,960
 ultimately having it land in MySQL basically.

614
00:39:02,960 --> 00:39:06,200
 And so the data problem is fun.

615
00:39:06,200 --> 00:39:10,840
 Real world example of this I think is you may have one centralized database for users,

616
00:39:10,840 --> 00:39:13,960
 usernames, passwords, profile information, and things like that.

617
00:39:13,960 --> 00:39:15,640
 That does have to be consistent.

618
00:39:15,640 --> 00:39:17,100
 You kind of want one source of truth.

619
00:39:17,100 --> 00:39:20,940
 You don't want your record of who a person is to be eventually consistent, but can you

620
00:39:20,940 --> 00:39:25,520
 build a system that once a user's logged in, they're given a token or some sort of cryptographically

621
00:39:25,520 --> 00:39:29,700
 secure piece of information that lets them act in the system without having to go validate

622
00:39:29,700 --> 00:39:31,920
 it back at that database for every page load.

623
00:39:31,920 --> 00:39:35,080
 If you can build a system like that, then all of a sudden you can connect two users

624
00:39:35,080 --> 00:39:40,080
 on the shortest path, totally remove that data store from the system and let them have

625
00:39:40,080 --> 00:39:41,280
 a great time.

626
00:39:41,280 --> 00:39:44,840
 When they come back and make some sort of update or something like that, the administrative

627
00:39:44,840 --> 00:39:49,740
 action kind of goes back, but you really have to think about every single action.

628
00:39:49,740 --> 00:39:52,400
 What data do I have and what data do I need?

629
00:39:52,400 --> 00:39:57,700
 If you can leverage the edge with kind of no preconceptions about that, you can really

630
00:39:57,700 --> 00:40:01,340
 go a lot farther than you could 10 years ago where it just didn't matter and you really

631
00:40:01,340 --> 00:40:02,720
 didn't have to think about it.

632
00:40:02,720 --> 00:40:06,060
 You are rendering HTML on the server side right next to the database.

633
00:40:06,060 --> 00:40:08,540
 Who cares about how many database queries you're running?

634
00:40:08,540 --> 00:40:09,620
 It's all right there.

635
00:40:09,620 --> 00:40:10,940
 That world is just over.

636
00:40:10,940 --> 00:40:19,240
 Yeah, you're on my mind, Nick, because I wanted to share two product requirements where we're

637
00:40:19,240 --> 00:40:22,920
 starting to give people more specialized ways of storing data.

638
00:40:22,920 --> 00:40:29,120
 So the vast majority of data might be in planet scale, but for example, I like to use the

639
00:40:29,120 --> 00:40:36,720
 example of when Apple says the new iPhone is coming, we're putting a facade over the

640
00:40:36,720 --> 00:40:37,720
 store.

641
00:40:37,720 --> 00:40:43,180
 We're really disabling the store to create some intrigue and whatever, something is coming.

642
00:40:43,180 --> 00:40:49,760
 We can model that as a globally replicated data point that can be modified at runtime.

643
00:40:49,760 --> 00:40:51,840
 So we call this edge config.

644
00:40:51,840 --> 00:40:57,340
 So when you make a change to the edge config, we push it actively to every place in the

645
00:40:57,340 --> 00:40:59,780
 world where we can run compute.

646
00:40:59,780 --> 00:41:06,820
 So now when I'm rendering my pages, say if store closed, render some FOMO inducing illustration

647
00:41:06,820 --> 00:41:09,540
 else here's all the items.

648
00:41:09,540 --> 00:41:15,160
 And I can control that flag without redeploying my application and without going all the way

649
00:41:15,160 --> 00:41:16,380
 to origin.

650
00:41:16,380 --> 00:41:20,160
 So I'm truly doing everything and personalizing everything at the edge.

651
00:41:20,160 --> 00:41:26,420
 So with edge config on Vercel, you get that extra layer on top of data, that extra knob

652
00:41:26,420 --> 00:41:30,540
 to be able to compliment your core data store or your core backends.

653
00:41:30,540 --> 00:41:33,980
 And the other one that we're thinking about is the one that Nick mentioned where the product

654
00:41:33,980 --> 00:41:37,580
 example here is your shopping cart state.

655
00:41:37,580 --> 00:41:44,300
 Whether you have three things, imagine you're anonymously compiling a wishlist or your card

656
00:41:44,300 --> 00:41:46,540
 before you log into Amazon.

657
00:41:46,540 --> 00:41:51,780
 Do you really need to go to origin in order to collect those items into the store, into

658
00:41:51,780 --> 00:41:53,040
 your bag?

659
00:41:53,040 --> 00:41:54,040
 Probably not.

660
00:41:54,040 --> 00:41:56,380
 It's just for that user.

661
00:41:56,380 --> 00:42:02,120
 It can travel the world with that user and it can offer consistency for that user without

662
00:42:02,120 --> 00:42:03,120
 going to origin.

663
00:42:03,120 --> 00:42:06,940
 So I think we're going to see more of the emergence of these specialized data stores

664
00:42:06,940 --> 00:42:11,460
 and DuckDB and others may be examples of this.

665
00:42:11,460 --> 00:42:17,500
 It's clear from this discussion that data replication consistency is hard.

666
00:42:17,500 --> 00:42:18,700
 Abstraction definitely helps here.

667
00:42:18,700 --> 00:42:20,340
 So let's talk about serverless.

668
00:42:20,340 --> 00:42:27,380
 I feel like recently serverless, edge, the terms are being used a little bit interchangeably.

669
00:42:27,380 --> 00:42:28,840
 Why is this happening?

670
00:42:28,840 --> 00:42:31,060
 Should they be interchangeable?

671
00:42:31,060 --> 00:42:34,160
 Maybe one for you, cut.

672
00:42:34,160 --> 00:42:37,440
 Oh boy.

673
00:42:37,440 --> 00:42:40,700
 I have hot takes about serverless.

674
00:42:40,700 --> 00:42:45,760
 I don't, so like if we skip the hot takes for a second, I think that when people are

675
00:42:45,760 --> 00:42:51,720
 sort of legitimately talking about serverless, when it's not just a marketing thing, and

676
00:42:51,720 --> 00:42:55,640
 I think so much of this has been informed by like AWS shipping Lambda and then inventing

677
00:42:55,640 --> 00:43:00,340
 a way to use it, which was not entirely organic.

678
00:43:00,340 --> 00:43:04,640
 I think what happens, and Guillermo mentioned this when he said scaling to zero.

679
00:43:04,640 --> 00:43:08,840
 I think what happens when you do push compute and push logic and push apps all over the

680
00:43:08,840 --> 00:43:14,440
 world is all of a sudden you start caring a lot about what's turned on and when.

681
00:43:14,440 --> 00:43:17,740
 And I think when people are talking about serverless, a lot of it is like, I obviously

682
00:43:17,740 --> 00:43:21,680
 am not going to keep 140 processes running all around the world at all times.

683
00:43:21,680 --> 00:43:26,280
 I'm obviously not going to keep 140 replicas of my entire database all around the world

684
00:43:26,280 --> 00:43:27,440
 at all times.

685
00:43:27,440 --> 00:43:34,180
 And I think that it's not that they're interchangeable, it's that the truly interesting serverless

686
00:43:34,180 --> 00:43:38,880
 stuff is very important for global workloads.

687
00:43:38,880 --> 00:43:44,340
 And I think that it almost always reduces to when is my stuff running versus when is

688
00:43:44,340 --> 00:43:47,380
 it not, and when do I have data somewhere and when do I don't.

689
00:43:47,380 --> 00:43:52,940
 And a lot on top of that is not entirely useful all of the time.

690
00:43:52,940 --> 00:44:01,680
 Yeah, I would say when you want to go global first and you might be using an older deployment

691
00:44:01,680 --> 00:44:03,680
 model, it's hard to justify the cost, right?

692
00:44:03,680 --> 00:44:06,200
 Like, okay, so I'm going to be in 20 data centers.

693
00:44:06,200 --> 00:44:10,600
 I'm going to create 20 Kubernetes clusters and 20 data stores.

694
00:44:10,600 --> 00:44:12,720
 I like that example, Kurt.

695
00:44:12,720 --> 00:44:13,760
 Most folks don't want to do that.

696
00:44:13,760 --> 00:44:20,760
 So I think Edge has inherited a lot of the properties of serverless in that in order

697
00:44:20,760 --> 00:44:28,200
 to make the dream viable of deploying a dynamic workload that has a similar cost model and

698
00:44:28,200 --> 00:44:33,600
 operational model as a static CDN, but it can execute dynamic compute.

699
00:44:33,600 --> 00:44:38,480
 Those things typically go hand in hand, the ability to scale to zero, the ability to scale

700
00:44:38,480 --> 00:44:39,720
 up really quickly.

701
00:44:39,720 --> 00:44:41,320
 This one's really interesting.

702
00:44:41,320 --> 00:44:47,040
 We have a lot of customers in the media streaming space and some of the tech leaders tell me

703
00:44:47,040 --> 00:44:54,480
 I have, we drop a new episode that might become extremely popular in one specific region of

704
00:44:54,480 --> 00:44:55,480
 the world.

705
00:44:55,480 --> 00:44:57,880
 Sometimes it's completely unpredictable.

706
00:44:57,880 --> 00:45:01,200
 There's just folks that tend to like some shows and some episodes more.

707
00:45:01,200 --> 00:45:06,320
 So they need, they can't even predict where to preallocate more compute.

708
00:45:06,320 --> 00:45:10,920
 So they need that ability to spike up and scale up really, really quickly in a very

709
00:45:10,920 --> 00:45:13,680
 uncertain environment, very unpredictable environment.

710
00:45:13,680 --> 00:45:19,120
 So I think it's not just a scale to zero is the rapid fluctuations in traffic.

711
00:45:19,120 --> 00:45:21,280
 Yeah, I couldn't agree more.

712
00:45:21,280 --> 00:45:24,420
 And, you know, I'll add one small hot take.

713
00:45:24,420 --> 00:45:28,040
 I'm often fond of saying internally that we put the server in serverless.

714
00:45:28,040 --> 00:45:32,520
 You know, we've got customers that were onboarding at the terabyte, the petabyte scale of data,

715
00:45:32,520 --> 00:45:34,320
 and those people know they have servers.

716
00:45:34,320 --> 00:45:37,680
 They want to know how many, they want to know how much they cost.

717
00:45:37,680 --> 00:45:42,440
 That's a big portion of what we provide is actually the ability to talk about servers.

718
00:45:42,440 --> 00:45:48,460
 And so I I've used serverless as a similar phrase to agile or rest or other words that

719
00:45:48,460 --> 00:45:53,360
 people in the industry use to describe a thought process or to describe a framework with which

720
00:45:53,360 --> 00:45:54,640
 they're operating their business.

721
00:45:54,640 --> 00:45:59,380
 When you say I do agile, what you really mean is I don't plan too far and ahead, but I understand

722
00:45:59,380 --> 00:46:03,020
 we're going to make mistakes and we have to kind of be iterative when people say they

723
00:46:03,020 --> 00:46:04,020
 do rest.

724
00:46:04,020 --> 00:46:07,400
 What they really mean is they make HTTP requests and get Jason back.

725
00:46:07,400 --> 00:46:09,540
 They're not talking about the entire framework.

726
00:46:09,540 --> 00:46:12,500
 And so to me, you can do serverless without an edge.

727
00:46:12,500 --> 00:46:17,620
 You can have Lambda in one region that does one thing and it's incredibly slow with really

728
00:46:17,620 --> 00:46:22,720
 cold starts and doesn't have any of the properties that you actually want out of an edge.

729
00:46:22,720 --> 00:46:26,600
 Or you can kind of adopt the serverless best practices.

730
00:46:26,600 --> 00:46:30,740
 You can use the right framework, you can use the right tools and you can go incredibly

731
00:46:30,740 --> 00:46:31,740
 far.

732
00:46:31,740 --> 00:46:33,940
 So to me, I think we've just outgrown the term.

733
00:46:33,940 --> 00:46:37,980
 We need to combine a lot of different pieces of what we're talking about.

734
00:46:37,980 --> 00:46:42,380
 Maybe call it like, you know, like we have 13 factor apps, you've got the 13 factor serverless

735
00:46:42,380 --> 00:46:47,060
 application that uses the edge optimistically, that caches optimistically and kind of all

736
00:46:47,060 --> 00:46:48,940
 the things that we've discussed.

737
00:46:48,940 --> 00:46:54,340
 But at the end of the day, just saying serverless now is not necessarily going to give people

738
00:46:54,340 --> 00:46:57,820
 the information they need to understand what it is you're actually trying to do.

739
00:46:57,820 --> 00:47:01,340
 And I'm a pragmatic person, so I'm always trying to drill in.

740
00:47:01,340 --> 00:47:03,260
 What are people really trying to do with PlanetScale?

741
00:47:03,260 --> 00:47:05,820
 What are people really trying to do with their database?

742
00:47:05,820 --> 00:47:09,340
 And to me, saying serverless at this point is akin to saying it's fast.

743
00:47:09,340 --> 00:47:11,700
 It's like, cool, yes, we all want it to be fast.

744
00:47:11,700 --> 00:47:13,060
 But what is it actually?

745
00:47:13,060 --> 00:47:15,540
 What is your serverless really doing?

746
00:47:15,540 --> 00:47:20,500
 When you can bust through that, that's when you can have these nuanced technical discussions

747
00:47:20,500 --> 00:47:23,700
 about how to design beautiful experiences for customers.

748
00:47:23,700 --> 00:47:28,580
 But just saying serverless isn't enough to get there.

749
00:47:28,580 --> 00:47:34,340
 So I will take this video and I will send it to AWS's product marketing department so

750
00:47:34,340 --> 00:47:36,380
 you can take care of this confusion.

751
00:47:36,380 --> 00:47:38,380
 We need to end it.

752
00:47:38,380 --> 00:47:43,300
 Maybe this next question is a little bit of a call to arms.

753
00:47:43,300 --> 00:47:46,380
 What are some of the things that have yet to be solved for this design paradigm?

754
00:47:46,380 --> 00:47:54,380
 If I'm a builder, I'm a developer building some application that is user-facing, what

755
00:47:54,380 --> 00:47:58,060
 needs to be there that's not there today?

756
00:47:58,060 --> 00:48:02,540
 I was going to say for the first part of the question, what do developers, how do developers

757
00:48:02,540 --> 00:48:05,700
 adopt best of breed technologies today?

758
00:48:05,700 --> 00:48:11,880
 I would say our point of view is this idea of framework defined infrastructure because

759
00:48:11,880 --> 00:48:19,340
 to Nick's point, it's very hard to adopt a very nebulous term like serverless.

760
00:48:19,340 --> 00:48:22,780
 And edge for a lot of folks is also quite nebulous.

761
00:48:22,780 --> 00:48:31,380
 So if serverless for you means fast and flexible infrastructure and iterate quickly, I like

762
00:48:31,380 --> 00:48:35,300
 the agile comparison because I do think a lot of folks just want to become more agile

763
00:48:35,300 --> 00:48:36,300
 as a business.

764
00:48:36,300 --> 00:48:38,980
 And that's why they are attracted to serverless.

765
00:48:38,980 --> 00:48:43,860
 I would say, start with a framework, a modern framework has been designed in conjunction

766
00:48:43,860 --> 00:48:48,020
 with a platform or with infrastructure that allows you to get that agility.

767
00:48:48,020 --> 00:48:53,200
 So obviously for us, it's Next.js and Vercel or it's VeltKit or Remix or Astro.

768
00:48:53,200 --> 00:48:59,740
 This modern frameworks tend to bake in best practices and opinions to get a lot of the

769
00:48:59,740 --> 00:49:03,820
 benefits that you want out of this new trends.

770
00:49:03,820 --> 00:49:11,540
 Maybe the last question we have for everyone.

771
00:49:11,540 --> 00:49:14,260
 What questions do you have for each other?

772
00:49:14,260 --> 00:49:19,640
 Are there any burning questions you have from before this call or from during this call

773
00:49:19,640 --> 00:49:25,340
 that you want to learn from each other about the open forum?

774
00:49:25,340 --> 00:49:29,340
 I think we talk a lot.

775
00:49:29,340 --> 00:49:32,100
 I was going to say the same thing.

776
00:49:32,100 --> 00:49:35,020
 I was going to say it's a friendly group of faces.

777
00:49:35,020 --> 00:49:42,140
 The thing that I'm always curious about is we all own a slice of the stack, let's say.

778
00:49:42,140 --> 00:49:46,460
 Some bigger slices, some smaller slices, some deeper, but at the end of the day, none of

779
00:49:46,460 --> 00:49:48,900
 us are the one-stop shop for a customer.

780
00:49:48,900 --> 00:49:50,980
 You're not only going to go to fly.

781
00:49:50,980 --> 00:49:54,260
 You're not only going to go to Vercel or PlanetScale.

782
00:49:54,260 --> 00:49:58,540
 What are the pieces that you see your customers struggling with outside of your slice?

783
00:49:58,540 --> 00:50:00,180
 Where are they failing?

784
00:50:00,180 --> 00:50:03,420
 Oftentimes that failure can cascade, and we see this all the time.

785
00:50:03,420 --> 00:50:06,300
 That failure cascades to they're spending less money on PlanetScale.

786
00:50:06,300 --> 00:50:08,340
 They're consuming fewer database resources.

787
00:50:08,340 --> 00:50:12,980
 I wish I could snap my fingers and give them what to actually make them more successful

788
00:50:12,980 --> 00:50:14,980
 on your platform.

789
00:50:14,980 --> 00:50:18,700
 Juan, I love that you set it up that way.

790
00:50:18,700 --> 00:50:22,680
 I think that you can't send this next bar to AWS.

791
00:50:22,680 --> 00:50:28,380
 I think if you fast forward 10, 15 years, the next public cloud is kind of a rebel alliance

792
00:50:28,380 --> 00:50:35,500
 of us three and 47 other companies that have basically built a very special user experience

793
00:50:35,500 --> 00:50:42,940
 for a deep problem that actual humans have versus cobbling together 400 products with

794
00:50:42,940 --> 00:50:48,980
 wildly variable experiences that might occasionally be good.

795
00:50:48,980 --> 00:50:52,820
 I actually love your question because I think it's like, "Well, one, that sounds great for

796
00:50:52,820 --> 00:50:53,820
 all of us.

797
00:50:53,820 --> 00:50:58,260
 That's amazing if all future workloads are in some combination of these platforms."

798
00:50:58,260 --> 00:51:04,140
 But I think what's so interesting is there's still silos.

799
00:51:04,140 --> 00:51:09,860
 It's hard to get a cohesive developer experience that actually does everything someone would

800
00:51:09,860 --> 00:51:10,860
 need to do.

801
00:51:10,860 --> 00:51:13,580
 I think you can pick and choose and get good pieces.

802
00:51:13,580 --> 00:51:18,260
 And if you know which companies to go talk to and you know which products to go use,

803
00:51:18,260 --> 00:51:23,180
 you can actually build the 15-year from now stack right now.

804
00:51:23,180 --> 00:51:24,380
 But you still have to know this.

805
00:51:24,380 --> 00:51:28,580
 And I think what's been interesting about watching people push this in different directions,

806
00:51:28,580 --> 00:51:35,180
 and we have a very different set of users than Vercel, I feel like Vercel solves a big

807
00:51:35,180 --> 00:51:36,820
 problem for a lot of people.

808
00:51:36,820 --> 00:51:40,100
 I feel like we solve a big problem for a lot of different people.

809
00:51:40,100 --> 00:51:45,300
 And I think ultimately those two groups intersect at some point.

810
00:51:45,300 --> 00:51:51,720
 And I'm not sure how we make that good, how we make this cohesive, how we make it so someone's

811
00:51:51,720 --> 00:51:54,580
 not looking at Amazon's 250 products.

812
00:51:54,580 --> 00:51:57,860
 These numbers will be different every time I say it, 250-plus products.

813
00:51:57,860 --> 00:52:02,340
 And then comparing it to our one thing that we're exceptionally good at and giving it

814
00:52:02,340 --> 00:52:06,420
 a good shake, basically.

815
00:52:06,420 --> 00:52:11,340
 So that's what I'm most interested in figuring out with these guys and 50 other friends,

816
00:52:11,340 --> 00:52:12,340
 basically.

817
00:52:12,340 --> 00:52:13,340
 Yeah.

818
00:52:13,340 --> 00:52:18,000
 Something you mentioned there too is when the complexity accumulates, maintaining a

819
00:52:18,000 --> 00:52:23,180
 cohesive developer experience over time becomes quite the feat.

820
00:52:23,180 --> 00:52:28,660
 So this is a problem space that we're looking at quite closely now, which is what we've

821
00:52:28,660 --> 00:52:34,740
 noticed is we can bake in all the best possible best practices and recommendations and ideas

822
00:52:34,740 --> 00:52:38,460
 that we can into the platform and into the frameworks.

823
00:52:38,460 --> 00:52:41,700
 But at some point, these frameworks are Turing complete.

824
00:52:41,700 --> 00:52:42,700
 They can do everything.

825
00:52:42,700 --> 00:52:44,440
 They can mine Bitcoin if you want.

826
00:52:44,440 --> 00:52:48,740
 And I'm not saying employees out there, a massive enterprise that are deploying Bitcoin

827
00:52:48,740 --> 00:52:50,340
 mining scripts.

828
00:52:50,340 --> 00:52:56,820
 But because the power is unlimited, how do you guide organizations of really sizable

829
00:52:56,820 --> 00:52:59,660
 scale into the right patterns?

830
00:52:59,660 --> 00:53:04,240
 Whether it's, okay, planet scale is going to be fast by default, but if you forget to

831
00:53:04,240 --> 00:53:09,460
 use an index or you do a crazy left join, whatever, like, oh, there's going to be a

832
00:53:09,460 --> 00:53:10,800
 price there.

833
00:53:10,800 --> 00:53:16,460
 And how do folks inside an organization negotiate those trade-offs and even the awareness that

834
00:53:16,460 --> 00:53:20,460
 they're making those trade-offs and accumulating that tech that.

835
00:53:20,460 --> 00:53:26,140
 So I think there is a lot to be solved beyond the world of infrastructure.

836
00:53:26,140 --> 00:53:32,420
 It's more like the developer experience at scale and more importantly, over time, everyone

837
00:53:32,420 --> 00:53:37,220
 launches something new and it's fast and cool on day one.

838
00:53:37,220 --> 00:53:40,140
 What's the DX in day 100?

839
00:53:40,140 --> 00:53:43,800
 That's the problem that we're looking at now and it's a tough one, but we're excited about

840
00:53:43,800 --> 00:53:44,800
 it.

841
00:53:44,800 --> 00:53:45,800
 I couldn't agree.

842
00:53:45,800 --> 00:53:46,800
 Oh, sorry.

843
00:53:46,800 --> 00:53:47,800
 Go ahead.

844
00:53:47,800 --> 00:53:48,860
 I actually love that you brought that up.

845
00:53:48,860 --> 00:53:55,520
 I think one, I'm kind of constantly at risk of feeling curmudgeonly, but one of the, I

846
00:53:55,520 --> 00:54:01,360
 think interesting things about developers now versus 10 plus years ago is there's, I

847
00:54:01,360 --> 00:54:06,040
 felt there's this almost like resistance to understanding the plumbing.

848
00:54:06,040 --> 00:54:07,640
 That makes sense.

849
00:54:07,640 --> 00:54:11,640
 And I don't really know what the answer there is, but when you talk about things like missing

850
00:54:11,640 --> 00:54:18,660
 an index or even if you go as far as how do you debug an app that's successful, deploy

851
00:54:18,660 --> 00:54:23,420
 it over the world and actually identify where it's not doing what you want, even if it's

852
00:54:23,420 --> 00:54:26,780
 behaving the way the infrastructure thinks it should.

853
00:54:26,780 --> 00:54:32,180
 I've been very curious what people were going to need to know in 10 years when they're working

854
00:54:32,180 --> 00:54:33,180
 with this stuff.

855
00:54:33,180 --> 00:54:35,540
 Because part of me is you should learn the plumbing.

856
00:54:35,540 --> 00:54:36,540
 It's great.

857
00:54:36,540 --> 00:54:37,540
 It makes your life better.

858
00:54:37,540 --> 00:54:39,340
 It's reasonable in some ways.

859
00:54:39,340 --> 00:54:40,340
 Yeah.

860
00:54:40,340 --> 00:54:41,480
 I'll add on one more.

861
00:54:41,480 --> 00:54:43,740
 I completely agree with you about knowing the plumbing.

862
00:54:43,740 --> 00:54:48,340
 I think every, at every layer here, you can get yourself in a great situation or a really

863
00:54:48,340 --> 00:54:51,660
 difficult situation just by kind of holding it wrong.

864
00:54:51,660 --> 00:54:53,000
 And that's a problem.

865
00:54:53,000 --> 00:54:57,000
 The thing that I'll add on is I think the enterprise and a lot of what we're talking

866
00:54:57,000 --> 00:55:02,640
 about here are still smaller teams, people picking and choosing the cutting edge as we

867
00:55:02,640 --> 00:55:04,320
 get farther into the enterprise.

868
00:55:04,320 --> 00:55:07,740
 And we've had a lot of fun doing that.

869
00:55:07,740 --> 00:55:11,860
 Compliance, security, kind of pleasing internal security teams.

870
00:55:11,860 --> 00:55:14,980
 I think we give teams heart attack when we talk about, oh, it can be global.

871
00:55:14,980 --> 00:55:16,380
 You can be anywhere.

872
00:55:16,380 --> 00:55:22,180
 And the first thing on someone who, mine, whose job it is to manage risk goes, what

873
00:55:22,180 --> 00:55:23,440
 are you talking about?

874
00:55:23,440 --> 00:55:24,480
 I know firewalls.

875
00:55:24,480 --> 00:55:25,560
 I know networking rules.

876
00:55:25,560 --> 00:55:26,560
 I know subnets.

877
00:55:26,560 --> 00:55:29,440
 And that's no fault to them because that's how technology's worked.

878
00:55:29,440 --> 00:55:34,080
 How do you sell into a company like that who you know can move so much faster and actually

879
00:55:34,080 --> 00:55:39,400
 gain a competitive advantage while at the same time they're doing two levels up in terms

880
00:55:39,400 --> 00:55:46,000
 of developer tooling and paradigms, bridging that gap with all of these and 50 other companies

881
00:55:46,000 --> 00:55:47,000
 is really difficult.

882
00:55:47,000 --> 00:55:48,380
 And it's something that Amazon does well, right?

883
00:55:48,380 --> 00:55:52,360
 Once you buy into the Amazon, you've got the Amazon, you can use any of those 400 different

884
00:55:52,360 --> 00:55:53,480
 pieces.

885
00:55:53,480 --> 00:55:57,120
 We all have to figure out our own part of that stack and how to sell our part of that

886
00:55:57,120 --> 00:56:01,860
 stack and marry those parts together in a way that is compliant and understandable so

887
00:56:01,860 --> 00:56:05,960
 that these bigger companies can kind of understand it and see through it with pricing and all

888
00:56:05,960 --> 00:56:10,000
 of that.

889
00:56:10,000 --> 00:56:13,960
 Points to this idea that perhaps partnerships between companies like the ones you all are

890
00:56:13,960 --> 00:56:20,220
 building is the most important feature developer experience.

891
00:56:20,220 --> 00:56:27,740
 And so now that we've mentioned Bitcoin, DuckDB and AI and Edge, I think we've hit all the

892
00:56:27,740 --> 00:56:29,200
 things that matter today.

893
00:56:29,200 --> 00:56:32,660
 And so our work is done here.

894
00:56:32,660 --> 00:56:35,740
 Thank you all for having this discussion.

895
00:56:35,740 --> 00:56:41,340
 We will be posting this for the rest of the world who wasn't here live to see.

896
00:56:41,340 --> 00:56:42,340
 And this is wonderful.

897
00:56:42,340 --> 00:56:43,340
 Thank you.

898
00:56:43,340 --> 00:56:44,340
 Thank you so much.

899
00:56:44,340 --> 00:56:45,340
 Thanks, everyone.

900
00:56:45,340 --> 00:56:46,340
 Have a good one, everyone.

901
00:56:46,340 --> 00:56:47,340
 Bye, everyone.

902
00:56:47,340 --> 00:56:47,340
 Bye.

903
00:56:47,340 --> 00:56:48,340
 Bye, everyone.

904
00:56:48,340 --> 00:56:49,340
 Bye.

905
00:56:49,340 --> 00:56:49,840
 Bye.

906
00:56:49,840 --> 00:56:54,840
 [ Silence ]

